@namespace CaptionZen.Shared.Components

@implements INavigationView
@implements IAsyncDisposable

<div @ref="_containerReference" class="navigation-view @(IsOverlay && IsPaneOpen ? "has-overlay" : "")">

    <div class="pane @GetPaneClass()" style="@GetPaneStyle()">
        @if (PaneHeader is not null) {
            <div class="pane-header-container">
                @PaneHeader
            </div>
        }
        <div class="pane-content-container">
            @PaneContent
        </div>
        @if (PaneFooter is not null) {
            <div>
                @PaneFooter
            </div>
        }
    </div>

    <div class="main-content-container" style="@GetContentStyle()">
        @if (IsOverlay && IsPaneOpen) {
            <div class="overlay-backdrop" @onclick=@(() => SetIsPaneOpenAsync(false))></div>
        }
        <CascadingValue Value="NavigationViewPaneState">
            @Content
        </CascadingValue>
    </div>
</div>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private Services.NavigationParams NavigationParams { get; set; } = null!;

    private ElementReference _containerReference;
    private DotNetObjectReference<NavigationView>? _objectReference;
    private IJSObjectReference? _module;

    private NavigationViewPaneState NavigationViewPaneState = new(false, false, false);

    /// <summary>
    /// Content to display in the pane header.
    /// </summary>
    [Parameter] public RenderFragment? PaneHeader { get; set; }
    /// <summary>
    /// Content to display in the pane content area.
    /// </summary>
    [Parameter] public RenderFragment? PaneContent { get; set; }
    /// <summary>
    /// Content to display in the pane footer.
    /// </summary>
    [Parameter] public RenderFragment? PaneFooter { get; set; }

    [Parameter] public bool IsPaneOpen { get; set; }
    [Parameter] public EventCallback<bool> IsPaneOpenChanged { get; set; }
    /// <summary>
    /// Specifies if the pane overlays the main content or is inline when open. Default: <c>false</c>, Inline.
    /// </summary>
    [Parameter] public bool IsOverlay { get; set; }
    [Parameter] public EventCallback<bool> IsOverlayChanged { get; set; }
    /// <summary>
    /// Specifies the width of the pane when open.
    /// </summary>
    [Parameter] public int PaneWidth { get; set; } = 320;

    /// <summary>
    /// In a closed/Collapsed state, CompactPane=<c>true</c> shows the Pane in a compact(icons only). Hidden/Off canvas when false(Default)
    /// </summary>
    [Parameter] public bool UseCompactPane { get; set; }
    [Parameter] public EventCallback<bool> UseCompactPaneChanged { get; set; }
    [Parameter] public int CompactPaneWidth { get; set; } = 48;

    /// <summary>
    /// Main content to display beside the pane.
    /// </summary>
    [Parameter] public RenderFragment? Content { get; set; }

    public bool IsPaneInCompactState {
        get {
            return UseCompactPane && !IsPaneOpen;
        }
    }

    public async Task TogglePaneAsync() {
        await SetIsPaneOpenAsync(!IsPaneOpen);
    }

    protected override void OnParametersSet() {
        NavigationParams.NavigationView = this;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) return;

        _objectReference = DotNetObjectReference.Create(this);
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./_content/CaptionZen.Shared/Components/NavigationView/NavigationView.razor.js");

        await _module.InvokeVoidAsync("initializeResizeObserver", _objectReference, _containerReference, 1024, 768);
    }

    [JSInvokable]
    public async void OnBreakpointChanged(string breakpoint) {
        var currentBreakpoint = Enum.Parse<ScreenBreakpoint>(breakpoint);

        switch (currentBreakpoint) {
            case ScreenBreakpoint.Small:
                await SetIsOverlayAsync(true, false);
                await SetUseCompactPaneAsync(false, false);
                break;
            case ScreenBreakpoint.Medium:
                await SetIsOverlayAsync(true, false);
                await SetUseCompactPaneAsync(true, false);
                break;
            default:
                await SetIsOverlayAsync(false, false);
                await SetUseCompactPaneAsync(true, false);
                break;
        }

        NavigationViewPaneState = new(UseCompactPane, IsOverlay, IsPaneOpen);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync() {
        if (_module is not null) {
            try {
                await _module.InvokeVoidAsync("disposeResizeObserver", _containerReference);
                await _module.DisposeAsync();
            } catch (JSDisconnectedException) { }
        }

        _objectReference?.Dispose();
    }

    private string GetPaneClass() {
        var classes = new List<string> { "pane" };
        if (IsOverlay) classes.Add("overlay");
        if (IsPaneOpen) classes.Add("open");
        if (!IsPaneOpen && UseCompactPane) classes.Add("compact");
        if (!IsPaneOpen && !UseCompactPane) classes.Add("closed");
        return string.Join(" ", classes);
    }

    private string GetPaneStyle() {
        if (IsPaneOpen)
            return $"width: {PaneWidth}px;";
        if (UseCompactPane)
            return $"width: {CompactPaneWidth}px;";
        return "width: 0;";
    }

    private string GetContentStyle() {
        if (UseCompactPane && IsOverlay)
            return $"margin-left: {CompactPaneWidth}px;";

        return "margin-left: 0;";
    }

    private async Task SetIsPaneOpenAsync(bool value, bool changePaneState = true) {
        if (IsPaneOpen == value) return;

        IsPaneOpen = value;
        if (changePaneState) NavigationViewPaneState = new(UseCompactPane, IsOverlay, IsPaneOpen);
        await IsPaneOpenChanged.InvokeAsync(IsPaneOpen);

    }

    private async Task SetIsOverlayAsync(bool value, bool changePaneState = true) {
        if (IsOverlay == value) return;

        IsOverlay = value;
        if (changePaneState) NavigationViewPaneState = new(UseCompactPane, IsOverlay, IsPaneOpen);
        await IsOverlayChanged.InvokeAsync(IsOverlay);

    }

    private async Task SetUseCompactPaneAsync(bool value, bool changePaneState = true) {
        if (UseCompactPane == value) return;

        UseCompactPane = value;
        if (changePaneState) NavigationViewPaneState = new(UseCompactPane, IsOverlay, IsPaneOpen);
        await UseCompactPaneChanged.InvokeAsync(UseCompactPane);
    }

    private enum ScreenBreakpoint {
        Small,
        Medium,
        Large
    }
}