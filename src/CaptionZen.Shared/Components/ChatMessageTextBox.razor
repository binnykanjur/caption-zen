@namespace CaptionZen.Shared.Components

@implements IAsyncDisposable

<div class="container" style="--non-mobile-max-width:@NonMobileMaxWidth; --container-padding-multiple: @(ApplyPadding? 1: 0)">
    <div class="input-container">
        <FluentIcon Value="@(new AppIcons.Regular.Size24.YouTubeIcon())" Color="Color.Neutral"
                    style="position: absolute; top: 50%; transform: translateY(-50%); left: 15px; width: 20px; height: 20px;" />
        @if (Multiline)
        {
            <textarea @ref="_textAreaReference" MaxHeight="150" class="inputBox" style="resize: none; overflow-y: auto; padding: 10px 50px;"
                      @bind=Value @oninput="HandleOnInputAsync" @onkeyup="HandleKeyPress"
                      placeholder="@PlaceholderText" aria-label="@PlaceholderText" />
        }
        else
        {
            <input type="text" class="inputBox" @bind-value=Value @oninput="HandleOnInputAsync" @onkeyup="HandleKeyPress"
                   placeholder="@PlaceholderText" aria-label="@PlaceholderText">
        }

        @if (IsBusy)
        {
            <FluentButton IconEnd="@(new AppIcons.Regular.Size24.FilledStop())" BackgroundColor="rgba(0, 0, 0, 0)"
                          Title="Stop" style="position: absolute; top: 50%; transform: translateY(-50%); right: 15px;border: none;"
                          @onclick="OnCancelActionAsync" />
        }
        else
        {
            <FluentButton IconEnd="@(new Icons.Regular.Size24.Send())" BackgroundColor="rgba(0, 0, 0, 0)"
                          Title=@ActionText style="position: absolute; top: 50%; transform: translateY(-50%); right: 12px;border: none;"
                          @onclick="OnActionAsync" Disabled="@(Value is null)" />
        }
    </div>
    @if (CautionText is not null)
    {
        <div class="caution-text-container">
            <div>@CautionText</div>
        </div>
    }
</div>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    [Parameter] public bool IsBusy { get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public string? PlaceholderText { get; set; }
    [Parameter] public bool Multiline { get; set; }
    [Parameter, EditorRequired] public required string ActionText { get; set; }
    [Parameter] public string? CautionText { get; set; }
    [Parameter] public int MaxHeight { get; set; } = 150; // Default textArea max height in pixels
    [Parameter] public string NonMobileMaxWidth { get; set; } = "48rem";
    /// <summary>
    /// When <c>true</c> uses the predefined padding (applied to the container) is applied otherwise 0 is set
    /// </summary>
    [Parameter] public bool ApplyPadding { get; set; } = true;

    [Parameter] public EventCallback<string> OnInputChanged { get; set; }
    [Parameter] public EventCallback<string> OnActionInvoked { get; set; }
    [Parameter] public EventCallback<string> OnCancelActionInvoked { get; set; }

    private ElementReference? _textAreaReference;
    private IJSObjectReference? _module;
    private DotNetObjectReference<ChatMessageTextBox>? _dotNetReference;
    private bool _isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetReference = DotNetObjectReference.Create(this);
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./_content/CaptionZen.Shared/Components/ChatMessageTextBox.razor.js");
        }

        if (_textAreaReference is not null)
        {
            if (!_isInitialized)
            {
                await InitializeTextAreaAsync();
                _isInitialized = true;
            }
            else
            {
                await ResizeTextAreaAsync();
            }
        }
    }

    private async Task InitializeTextAreaAsync()
    {
        if (_textAreaReference is not null)
        {
            await _module!.InvokeVoidAsync("initialize", _textAreaReference, MaxHeight);
        }
    }

    private async Task ResizeTextAreaAsync()
    {
        if (_textAreaReference is not null)
        {
            await _module!.InvokeVoidAsync("resize", _textAreaReference);
        }
    }

    private async Task HandleOnInputAsync(ChangeEventArgs e)
    {
        var val = e.Value as string;
        if (val is null || val == Value) return;

        await ResizeTextAreaAsync();
        await OnInputChanged.InvokeAsync(val);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await OnActionAsync();
        }
    }

    private async Task OnActionAsync()
    {
        await OnActionInvoked.InvokeAsync(Value);
    }

    private async Task OnCancelActionAsync()
    {
        await OnCancelActionInvoked.InvokeAsync(Value);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module != null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (Microsoft.JSInterop.JSDisconnectedException) { }
        }

        _dotNetReference?.Dispose();
    }
}